`timescale 1ns/1ps

module tb_id_ex;

  logic clk;
  logic rst;

  // Inputs
  logic [31:0] src_data_a_in;
  logic [31:0] src_data_b_in;
  logic [31:0] imm_value_in;
  logic [4:0]  dest_reg_in;
  logic [31:0] pc_input;
  logic [1:0]  ex_control_in;
  logic        reg_write_en_in;
  logic        mem_write_en_in;
  logic        memory_enable_in;

  // Outputs
  logic [31:0] src_data_a_out;
  logic [31:0] src_data_b_out;
  logic [31:0] imm_value_out;
  logic [4:0]  dest_reg_out;
  logic [31:0] pc_out;
  logic [1:0]  ex_control_out;
  logic        reg_write_en_out;
  logic        mem_write_en_out;
  logic        memory_enable_out;

  // Instantiate DUT
  ID_EX dut (
    .clk(clk),
    .rst(rst),
    .src_data_a_in(src_data_a_in),
    .src_data_b_in(src_data_b_in),
    .imm_value_in(imm_value_in),
    .dest_reg_in(dest_reg_in),
    .pc_input(pc_input),
    .ex_control_in(ex_control_in),
    .reg_write_en_in(reg_write_en_in),
    .mem_write_en_in(mem_write_en_in),
    .memory_enable_in(memory_enable_in),

    .src_data_a_out(src_data_a_out),
    .src_data_b_out(src_data_b_out),
    .imm_value_out(imm_value_out),
    .dest_reg_out(dest_reg_out),
    .pc_out(pc_out),
    .ex_control_out(ex_control_out),
    .reg_write_en_out(reg_write_en_out),
    .mem_write_en_out(mem_write_en_out),
    .memory_enable_out(memory_enable_out)
  );

  // Clock generation
  always #5 clk = ~clk;

  initial begin
    $display("Running ID/EX pipeline register test...");

    // Initialization
    clk = 0;
    rst = 1;
    src_data_a_in = 32'h00000000;
    src_data_b_in = 32'h00000000;
    imm_value_in  = 32'h00000000;
    dest_reg_in   = 5'd0;
    pc_input      = 32'h00000000;
    ex_control_in = 2'b00;
    reg_write_en_in = 0;
    mem_write_en_in = 0;
    memory_enable_in = 0;

    // Release reset
    #10 rst = 0;

    // Apply values to latch
    #10;
    src_data_a_in = 32'h00000011;
    src_data_b_in = 32'h00000022;
    imm_value_in  = 32'h00000ABC;
    dest_reg_in   = 5'd5;
    pc_input      = 32'h00000008;
    ex_control_in = 2'b10;
    reg_write_en_in = 1;
    mem_write_en_in = 1;
    memory_enable_in = 1;

    #10;
    $display("Output after latching:");
    $display("srcA = %h, srcB = %h, imm = %h, dest = %d, pc = %h", src_data_a_out, src_data_b_out, imm_value_out, dest_reg_out, pc_out);
    $display("EX = %b, RegWrite = %b, MemWrite = %b, MemRead = %b", ex_control_out, reg_write_en_out, mem_write_en_out, memory_enable_out);

    #10;
    $finish;
  end

endmodule
